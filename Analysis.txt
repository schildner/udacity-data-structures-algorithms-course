Task 0:
Both times we are looking up a specific collection element by index - this is a static complexity operation. 
Thus: O(1)

Task 1:
Same as with Task 0 - some number of computations must be performed for each row in the input files.
O(n)

Task 2:
Even though in the first for loop there is an inner for loop present, it has static size - running exactly twice.
The other for loop only loops through unique phone numbers. Worst case this will be same size as the calls list size.
Thus same as for the above tasks apply: 
O(n)

Task 3:
First for loop goes through each record in calls input list.
Conversion of the set "unique_codes" to list is presumably also O(n) with linear relationship between input size and computations needed.
Sorting the list has worst case complexity O(n log n) which is still better than O(n).
Thus worst case is still: O(n)

Task 4:
Exactly same as task 3. 
The for loops for both input data sets add up to O(n) -  some number of computations must be performed for each row in the input files.
Sorting has lower worst case complexity than O(n) so overall worst case complexity:
O(n)

All tasks:
Single line printouts have static compexity O(1) as these occur just once, thus considered negligible.  
Printouts within the for loops in worst case would be same as input data size O(n).
